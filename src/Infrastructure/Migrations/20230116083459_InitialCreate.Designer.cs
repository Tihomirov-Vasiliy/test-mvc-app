// <auto-generated />
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230116083459_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.BusinessArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_business_areas");

                    b.ToTable("business_areas", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<long>("AuthorizedCapital")
                        .HasColumnType("bigint")
                        .HasColumnName("authorized_capital");

                    b.Property<int>("BusinessAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("business_area_id");

                    b.Property<string>("FioCeo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("fio_ceo");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<long>("Inn")
                        .HasMaxLength(10)
                        .HasColumnType("bigint")
                        .HasColumnName("inn")
                        .IsFixedLength();

                    b.Property<long>("Kpp")
                        .HasMaxLength(9)
                        .HasColumnType("bigint")
                        .HasColumnName("kpp")
                        .IsFixedLength();

                    b.Property<long>("Ogrn")
                        .HasMaxLength(13)
                        .HasColumnType("bigint")
                        .HasColumnName("ogrn")
                        .IsFixedLength();

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_organizations");

                    b.HasIndex("BusinessAreaId")
                        .HasDatabaseName("ix_organizations_business_area_id");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Organization", b =>
                {
                    b.HasOne("Domain.Entities.BusinessArea", "BusinessArea")
                        .WithMany("Organizations")
                        .HasForeignKey("BusinessAreaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_organizations_business_areas_business_area_id");

                    b.Navigation("BusinessArea");
                });

            modelBuilder.Entity("Domain.Entities.BusinessArea", b =>
                {
                    b.Navigation("Organizations");
                });
#pragma warning restore 612, 618
        }
    }
}
